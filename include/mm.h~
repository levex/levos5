#ifndef __MM_H_
#define __MM_H_

#include <stddef.h>
#include <stdint.h>

struct	boundary_tag
{
	unsigned int magic;			//< It's a kind of ...
	unsigned int size; 			//< Requested size.
	unsigned int real_size;		//< Actual size.
	int index;					//< Location in the page table.

	struct boundary_tag *split_left;	//< Linked-list info for broken pages.	
	struct boundary_tag *split_right;	//< The same.
	
	struct boundary_tag *next;	//< Linked list info.
	struct boundary_tag *prev;	//< Linked list info.
};


 
extern int liballoc_lock();
extern int liballoc_unlock();
extern void* liballoc_alloc(int);
extern int liballoc_free(void*,int);

       

void     *malloc(size_t);
void     *realloc(void *, size_t);
void     *calloc(size_t, size_t);
void      free(void *);	

/**
 * Copies a piece of memory from one place to another
 * @param void *dest pointer to destination
 * @param void *src pointer to source
 * @param uint32_t count number of bytes to copy
 * @return return pointer to destination
 */
void *memcpy(void *dest, const void *src, uint32_t count) {
	const uint8_t *pSource = (const uint8_t *) src;
	uint8_t *pDest = (uint8_t *) dest;
	
	for (; count; --count) *pDest++ = *pSource++;
	return dest;
}

/**
 * Fills a block of emmory with the specified value
 * @param void *dest pointer to memory to fill
 * @param uint8_t value Character/value to fill with
 * @param uint32_t count numebr of bytes to write
 */
void memset(void *dest, uint8_t value, uint32_t count) {
	uint8_t *pDest = (uint8_t *) dest;
	for (; count; --count) *pDest++ = value;
}

/**
 * Fills a block of memory with the specified value
 * @param void *dest pointer to memory to fill
 * @param uint16_t value Character/value to fill with
 * @param uint32_t count number of words to write
 */
void memsetw(void *dest, uint16_t value, uint32_t count) {
	uint16_t *pDest = (uint16_t *) dest;
	for (; count; --count) *pDest++ = value;
}

#endif
