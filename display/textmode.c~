#include <textmode.h>
#include <string.h>

uint32_t gpos = 0;		// current position in video memory
uint16_t *pScreen = (uint16_t *) 0xB8000;	// pointer to video memory
uint16_t gattr = 0x0700;	// attribute to text

static uint8_t hexmap[] = {
	'0', '1', '2', '3', '4', '5', '6', '7',
	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
};


int textmode_update(struct display *m)
{
	/* TODO: handle newlines! */
	for(int i = 0; i < m->mtty->bufpos; i++)
	{
		uint32_t index = 0xB8000 + i*2;
		*(uint16_t *)(index) = 0x1f << 8 | m->mtty->buffer[i];
	}
	return 0;
}

void textmode_putchar(struct display *m, char c)
{
	m = m;
	c = c;
}

int textmode_setactive(struct display *m)
{
	m = m;
	for(int i = 0; i < 2000; i++)
	{
		*(uint16_t *)(0xB8000 + i*2) = 0x1f << 8 | ' ';
	}
	return 0;
}

struct display __default_textmode = {
	.update = textmode_update,
	.putchar = textmode_putchar,
	.setactive = textmode_setactive,
	.mtty = 0,
};

struct display *textmode_display_new(struct tty *mtty)
{
	/* allocate space for a new display */
	struct display *cp = malloc(sizeof(struct display));
	/* copy to the new allocation the default settings of textmode */
	memcpy((uint8_t *)cp, (uint8_t *)&__default_textmode, sizeof(struct display));
	/* set the tty of the copied display */
	cp->mtty = mtty;
	/* no need to set the tty's disp field, as we are called so that our
	 * return value will become the tty's disp field.
	 */
	return cp;
} 



/**
 * Copies a piece of memory from one place to another
 * @param void *dest pointer to destination
 * @param void *src pointer to source
 * @param uint32_t count number of bytes to copy
 * @return return pointer to destination
 */
void *memcpy1(void *dest, const void *src, uint32_t count) {
	const uint8_t *pSource = (const uint8_t *) src;
	uint8_t *pDest = (uint8_t *) dest;
	
	for (; count; --count) *pDest++ = *pSource++;
	return dest;
}

/**
 * Fills a block of emmory with the specified value
 * @param void *dest pointer to memory to fill
 * @param uint8_t value Character/value to fill with
 * @param uint32_t count numebr of bytes to write
 */
void memset1(void *dest, uint8_t value, uint32_t count) {
	uint8_t *pDest = (uint8_t *) dest;
	for (; count; --count) *pDest++ = value;
}

/**
 * Fills a block of memory with the specified value
 * @param void *dest pointer to memory to fill
 * @param uint16_t value Character/value to fill with
 * @param uint32_t count number of words to write
 */
void memsetw1(void *dest, uint16_t value, uint32_t count) {
	uint16_t *pDest = (uint16_t *) dest;
	for (; count; --count) *pDest++ = value;
}





/**
 * Combines back- and foregorund color to attribute byte
 * @param uint8_t fore foregorund color
 * @param uint8_t back background color
 * @return word with attribtue byte in higher byte
 */
uint16_t attribut(uint8_t fore, uint8_t back) {
	uint16_t temp;

	temp = back<<4;
	temp |= fore;
	temp = temp<<8;
	return temp;
}	

/**
 * Sets current text attribute to new one
 * @param uint8_t fore foregorund color
 * @param uint8_t back background color
 */
void set_attribut(uint8_t fore, uint8_t back) {
	gattr = attribut(fore, back);
}

/**
 * moves internal and hardware cursor to specified coordinates
 * @param uint8_t x X coordinate to move to
 * @param uint8_t y Y coordinate to move to
 */
void gotoxy(uint8_t x, uint8_t y) {
	if (x >= COLS)
		x = COLS - 1;
	if (y >= ROWS)
		y = ROWS - 1;
	gpos = y<=COLS?x+(y*COLS):x+(GETY * COLS);
	move_cursor();
}

/**
 * "Scrolls down" eg moves text up and delete last line
 */
void scroll_down() {
	uint16_t blank, temp;
	
	blank = 0x20 | gattr;
	
	if (GETY >= ROWS) {
		temp = GETY - ROWS + 1;
		memcpy1(pScreen, pScreen + temp*COLS, (ROWS - temp) * COLS * 2);
		memsetw1(pScreen + (ROWS-temp) *COLS, blank, COLS);
		gpos = 1920;
	}
}

/**
 * Moves the hardware cursor to the current internal cursor
 */
void move_cursor() {
	outb(0x3D4, 14);
	outb(0x3D5, gpos>>8);
	outb(0x3D4, 15);
	outb(0x3D5, (uint8_t) gpos);
}

/**
 * Outputs a character to the screen
 * @param char ch character to output
 */
void putch(char ch) {					
	switch(ch) {
		case '\n': gotoxy(0,GETY+1); break;
		case '\r': gotoxy(0,GETY); break;
		case '\t': gotoxy(GETX<COLS-TEXTMODE_TABSIZE?GETX + TEXTMODE_TABSIZE:GETX, GETY); break;
			
		case 8:		//backspace
			pScreen[gpos] = (uint16_t) 0;
			break;
		
		default:
			pScreen[gpos++] = (uint16_t) (ch | gattr);
	}
	scroll_down();
	move_cursor();
}

/**
 * Output a zero-terminated string to the screen
 * @param uint8_t *s Pointer to string to output
 */
void puts(char *s) {
	while(*s) putch(*(s++));
}

/**
 * Clears the screen with the specified color and character
 * @param uint8_t character character to fill the screen with
 * @param uint16_t attr attributebyte
 */
void clearscreen(uint8_t character, uint16_t attr) {
	uint16_t temp=gattr;	
	uint32_t i;
	
	gattr = attr;
	gotoxy(0,0);
	for(i=0; i<=1999; ++i)
		putch(character);
	gotoxy(0,0);
	gattr = temp;	
}

/**
 * Outputs text with specified color at specified position
 * @param uint8_t *text zero-terminated string to output
 * @param uint8_t xpos X coordinate
 * @param uint8_t ypos Y coordinate
 * @param uint8_t vogr foreground color
 * @param uint8_t higr background color
 */
void TextOutColor(uint8_t *text, uint8_t xpos, uint8_t ypos, uint8_t vogr, uint8_t higr) {
	uint16_t attr = gattr;
	set_attribut(vogr, higr);
	TextOut(text, xpos, ypos);
	gattr = attr;
}

/**
 * Outputs text at specified position
 * @param uint8_t *text zero-terminated string to output
 * @param uint8_t xpos X coordinate
 * @param uint8_t ypos Y coordinate
 */
void TextOut(uint8_t *text, uint8_t xpos, uint8_t ypos) {
	uint32_t pos;	
	
	if (xpos>COLS) xpos = COLS;
	if (ypos>ROWS) ypos = ROWS;
	pos = xpos + (ypos * COLS);
	while (*text) {
		pScreen[pos] = (uint16_t) *text | gattr;
		++pos;
		++text;
	}
}

/**
 * detects installed graphics card type
 * @return CARD_MONO if monochromatic card
 *   	   CARD_COLOR if color card 
 */
uint8_t detect_vid(void) {
	uint8_t c = (*((uint16_t *) 0x410) & 0x30);

	return c?CARD_MONO:CARD_COLOR;
}

/**
 * Gets current Y coordinate
 * @return uint8_t current Y coordinate
 */
uint8_t getypos() {
	return (uint8_t) GETY;
}

/**
 * Gets current X coordinate
 * @return uint8_t current X coordinate
 */
uint8_t getxpos() {
	return (uint8_t) GETX;
}

/**
 * Kernel printf; prints text formatted
 *     format specifiers:
 * 			%s	zero-terminated string
 * 			%c	single character
 * 			%x	32 Bit hex
 * 			%X  8 Bit hex
 * 			%d  signed integer
 * 			%u  unsigned integer
 * @param uint8_t *format format string
 * @param ... arguments to format string
 */
void kprintf(char *format,...) {
	uint32_t *args = ((uint32_t*) &format) + 1;
	char *t, d[11], xx[9];
	
	xx[8] = 0;
	uint8_t aktarg=0;
	uint32_t u;
	int n, i;
	
	// first argument in args[0]
	while (*format) {
		if (*format == '%') {
			++format;
			if (*format == 0) break;
			
			switch (*format) {
				case 's':	//string
					t = (char *) args[aktarg];
					while (*t) 
						putch(*t++);
					break;
				
				case 'c':	//signle character
					putch((char) args[aktarg]);
					break;
					
				case 'x':	//32 bit hex
					u = args[aktarg];
					for(i=7; i>=0; --i) {
						xx[i]=hexmap[u & 0x0F];
						u >>= 4;
					}
					puts(xx);
					break;
					
				case 'd':	//sint32_t
					n = args[aktarg];
					if (n < 0) {
						u = -n;
						putch('-');
					} else {
						u = n;
					}
					
					i=9;
					do {
						d[i--] = (u%10) + '0';
						u /= 10;
					} while (u && i>=0);
					while (++i < 10) 
						putch(d[i]);
					break;
					
				case 'u': 	//unsigned integer
					u = args[aktarg];
					i=9;
					do {
						d[i--] = (u%10) + '0';
						u /= 10;
					} while (u && i>=0);
					while (++i < 10) 
						putch(d[i]);
					break;
						
				case 'X':	//8 bit hex 	
					n = args[aktarg];
					putch(hexmap[(n & 0xF0) >> 4]);
					putch(hexmap[n & 0x0F]);
					break;
				
				default:
					putch(*format);
			}
			++aktarg;
		} else {
			putch(*format);
		}
		++format;
	}
	//__asm__ __volatile__("xchg %bx,%bx");
}
